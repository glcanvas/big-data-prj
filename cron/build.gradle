

dependencies {

    implementation 'org.mongodb:bson:4.2.2'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation 'dev.morphia.morphia:core:1.6.1'
    implementation project(":kafka-client")
    implementation project(":saver")
    implementation project(":app-launcher")

    implementation group: 'org.json', name: 'json', version: '20160810'
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'

    testImplementation group: 'de.flapdoodle.embed', name: 'de.flapdoodle.embed.mongo', version: '2.2.0'
    testImplementation "org.testcontainers:testcontainers:1.15.3"
    testImplementation "org.testcontainers:kafka:1.15.3"
}

def createExecutableJar(jarName) {
    tasks.create("task_${jarName}_generate", Jar) {
        dependsOn('build')
        manifest {
            attributes(
                    'Main-Class': "vk.${jarName}.Main"
            )
        }
        classifier = 'all'
        baseName = jarName
        from {
            configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
            duplicatesStrategy = DuplicatesStrategy.WARN
        }
                {
                    exclude "META-INF/*.SF"
                    exclude "META-INF/*.DSA"
                    exclude "META-INF/*.RSA"
                }
        with jar
        duplicatesStrategy = DuplicatesStrategy.WARN
    }
}
createExecutableJar("cron")